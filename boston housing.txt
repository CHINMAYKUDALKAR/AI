# Imports
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Plot settings
from pylab import rcParams
rcParams['figure.figsize'] = 10, 8
%matplotlib inline

# Scikit-learn imports
from sklearn.linear_model import LinearRegression, Lasso, Ridge
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Load the dataset
regression_data = pd.read_csv('boston_housing.csv')
print(regression_data.head())

# Scatter plot to visualize data
plt.scatter(regression_data['Volume'], regression_data['Price'])
plt.xlabel('Volume')
plt.ylabel('Price')
plt.title('Price - Volume Data')
plt.grid(True)
plt.show()

# Prepare features and target
X = regression_data[['Volume']]  # Feature must be 2D
y = regression_data['Price']

# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.20, random_state=42)

# Initialize and train Linear Regression model
simple_linear_regression = LinearRegression()
simple_linear_regression.fit(X_train, Y_train)

# Predict
Y_pred = simple_linear_regression.predict(X_test)

# Evaluation metrics
print("Mean Squared Error: %.2f" % mean_squared_error(Y_test, Y_pred))
print("Mean Absolute Error: %.2f" % mean_absolute_error(Y_test, Y_pred))
print("R2 Score: %.2f" % r2_score(Y_test, Y_pred))

# Plot predictions on test data
plt.scatter(X_test, Y_test, color='blue', label='Actual')
plt.plot(X_test, Y_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel("Volume")
plt.ylabel("Price")
plt.title("Linear Regression (Test Set)")
plt.legend()
plt.grid(True)
plt.show()

# Plot predictions on training data
plt.scatter(X_train, Y_train, color='red', label='Training Data')
plt.plot(X_train, simple_linear_regression.predict(X_train), color='blue', label='Model')
plt.xlabel("Volume")
plt.ylabel("Price")
plt.title("Linear Regression (Training Set)")
plt.legend()
plt.grid(True)
plt.show()
