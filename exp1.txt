import numpy as np
from matplotlib import pyplot as plt

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def initializeParameters(inputFeatures, neuronsInHiddenLayers, outputFeatures):
    W1 = np.random.randn(neuronsInHiddenLayers, inputFeatures)
    W2 = np.random.randn(outputFeatures, neuronsInHiddenLayers)
    b1 = np.zeros((neuronsInHiddenLayers, 1))
    b2 = np.zeros((outputFeatures, 1))
    parameters = {"W1": W1, "b1": b1, "W2": W2, "b2": b2}
    return parameters

def forwardPropagation(X, Y, parameters):
    m = X.shape[1]
    W1, b1, W2, b2 = parameters["W1"], parameters["b1"], parameters["W2"], parameters["b2"]
    
    Z1 = np.dot(W1, X) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = sigmoid(Z2)
    
    cache = (Z1, A1, W1, b1, Z2, A2, W2, b2)
    logprobs = np.multiply(np.log(A2), Y) + np.multiply(np.log(1 - A2), (1 - Y))
    cost = -np.sum(logprobs) / m
    return cost, cache, A2

def backwardPropagation(X, Y, cache):
    m = X.shape[1]
    Z1, A1, W1, b1, Z2, A2, W2, b2 = cache
    
    dZ2 = A2 - Y
    dW2 = np.dot(dZ2, A1.T) / m
    db2 = np.sum(dZ2, axis=1, keepdims=True)
    
    dA1 = np.dot(W2.T, dZ2)
    dZ1 = dA1 * A1 * (1 - A1)
    dW1 = np.dot(dZ1, X.T) / m
    db1 = np.sum(dZ1, axis=1, keepdims=True) / m
    
    gradients = {"dW1": dW1, "db1": db1, "dW2": dW2, "db2": db2}
    return gradients

def updateParameters(parameters, gradients, learningRate):
    parameters["W1"] -= learningRate * gradients["dW1"]
    parameters["W2"] -= learningRate * gradients["dW2"]
    parameters["b1"] -= learningRate * gradients["db1"]
    parameters["b2"] -= learningRate * gradients["db2"]
    return parameters

def train_gate(X, Y, gate_name):
    neuronsInHiddenLayers = 2
    inputFeatures = X.shape[0]
    outputFeatures = Y.shape[0]
    
    parameters = initializeParameters(inputFeatures, neuronsInHiddenLayers, outputFeatures)
    epoch = 100000
    learningRate = 0.01
    losses = np.zeros((epoch, 1))

    for i in range(epoch):
        losses[i, 0], cache, A2 = forwardPropagation(X, Y, parameters)
        gradients = backwardPropagation(X, Y, cache)
        parameters = updateParameters(parameters, gradients, learningRate)

    # Plot loss
    plt.figure()
    plt.plot(losses)
    plt.xlabel("EPOCHS")
    plt.ylabel("Loss value")
    plt.title(f"{gate_name.upper()} Gate Loss Curve")
    plt.show()

    # Testing
    cost, _, A2 = forwardPropagation(X, Y, parameters)
    predictions = (A2 > 0.5).astype(float)
    print(f"{gate_name.upper()} Gate Prediction:\n{predictions}\n")

# AND Gate
X_and = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
Y_and = np.array([[0, 0, 0, 1]])
train_gate(X_and, Y_and, "and")

# OR Gate
X_or = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
Y_or = np.array([[0, 1, 1, 1]])
train_gate(X_or, Y_or, "or")

# NOR Gate
X_nor = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
Y_nor = np.array([[1, 0, 0, 0]])
train_gate(X_nor, Y_nor, "nor")

# XOR Gate
X_xor = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
Y_xor = np.array([[0, 1, 1, 0]])
train_gate(X_xor, Y_xor, "xor")
